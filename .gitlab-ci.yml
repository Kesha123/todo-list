variables:
  REMOTE_HOST: deploy@172.16.7.237
  BACKEND_IMAGE: ${CI_REGISTRY_IMAGE}/backend
  BACKEND_PRODUCTION_IMAGE: ${CI_REGISTRY_IMAGE}/backend:release
  FRONTEND_IMAGE: ${CI_REGISTRY_IMAGE}/frontend
  FRONTEND_PRODUCTION_IMAGE: ${CI_REGISTRY_IMAGE}/frontend:release


stages:
  - test
  - build
  - deploy

test_feature:
  stage: test
  image: node:latest
  script:
    - cd frontend
    - npm install && npm test
    - cd ../backend
    - rm package-lock.json
    - npm install && npm test
    - npm install
  except:
    - main


build_feature:
  stage: build
  image: docker:latest
  services:
  - docker:dind
  script:    
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker build -f backend/DockerfileServer -t "${BACKEND_IMAGE}" .
    - docker build -f frontend/DockerfileProduction -t "${FRONTEND_IMAGE}" .
  except:
    - main


test_production:
  stage: test
  image: node:latest
  script:
    - cd frontend
    - npm install && npm test
    - cd ../backend
    - rm package-lock.json
    - npm install && npm test
    - npm install
  only:
  - main


build_production:
  stage: build
  services:
    - docker:dind
  script:
    - echo "MONGODB=${MONGODB}" >> backend/.env
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker build -f backend/DockerfileServer -t "${BACKEND_PRODUCTION_IMAGE}" .
    - docker push "${BACKEND_PRODUCTION_IMAGE}"
    - docker build -f frontend/DockerfileProduction -t "${FRONTEND_PRODUCTION_IMAGE}" .
    - docker push "${FRONTEND_PRODUCTION_IMAGE}"
  only:
  - main


deploy_production:
  image: alpine:latest
  stage: deploy
  environment:
    name: production
    url: 172.16.7.237
  script:
    - apk update && apk add rsync openssh curl
    # Prepare SSH settings
    - mkdir -p ~/.ssh && (umask  077 ; echo "${DEPLOY_KEY_PRIVATE}" | base64 -d > ~/.ssh/id_rsa)
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # Prepare files for transfer
    - mkdir production_dir
    - cp docker-compose.production.yml production_dir/docker-compose.yml
    - echo "BACKEND_PRODUCTION_IMAGE=${BACKEND_PRODUCTION_IMAGE}" >> production_dir/.env
    - echo "FRONTEND_PRODUCTION_IMAGE=${FRONTEND_PRODUCTION_IMAGE}" >> production_dir/.env
    # Transfer to server
    - rsync -r production_dir "${REMOTE_HOST}:./"
    # Run commands on the server
    - ssh ${REMOTE_HOST} /bin/bash
      "
      echo 'Starting..';
      cd ~/production_dir;
      docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY;
      docker-compose pull;
      docker-compose up -d;
      "

  only:
  - main